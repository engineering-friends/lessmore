import asyncio
import textwrap

from contextlib import asynccontextmanager
from typing import TYPE_CHECKING

from ef_bots.ef_main_bot.add_user_to_chats import add_user_to_chats
from ef_bots.ef_main_bot.deps import Deps
from lessmore.utils.tested import tested
from loguru import logger
from teletalk.app import App
from teletalk.blocks.block import Block
from teletalk.blocks.build_default_message_callback import handle_cancel_callback
from teletalk.blocks.handle_errors import handle_errors
from teletalk.models.response import Response
from telethon.tl.types import User


if TYPE_CHECKING:
    from ef_bots.ef_main_bot import main


@tested([main] if TYPE_CHECKING else [])
class EfMainBot:
    def __init__(self, deps: Deps):
        self.deps = deps

    # - Context manager

    @staticmethod
    @asynccontextmanager
    async def stack(env: str):
        async with Deps(env=env) as deps:
            yield (
                EfOrgBot(deps=deps),  # this class
                await App(
                    bot=deps.config.telegram_bot_token,
                    state_backend="rocksdict",
                    state_config={"path": str(deps.local_files_dir / "app_state")},
                ).__aenter__(),  # teletalk app
            )

    # - Building blocks

    @property
    def menu(self) -> Block:
        return Block(
            "‚öôÔ∏è *–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ*",
            inline_keyboard=[
                [("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç", self.write_post)],
                # [("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", self.create_request)],
                # [("Random Coffee", self.random_coffee)],
                # [("–£–∑–Ω–∞—Ç—å", self.learn_more)],
            ],
        )

    @tested([test_write_post] if TYPE_CHECKING else [])
    @handle_errors
    async def write_post(self, response: Response):
        # - 1. Write post

        body = await response.ask("1. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")

        # - 2. Get title

        title = await response.ask(
            "2. –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞",
            inline_keyboard=[["ü§ñ –í–∑—è—Ç—å –Ω–∞—à –≤–∞—Ä–∏–∞–Ω—Ç: diddle doo"]],
            message_callback=handle_cancel_callback,
        )

        # - 3. Generate an article cover

        files = []

        # - 4. Validate the post

        while True:
            # - Ask if the post is valid

            answer = await response.ask(
                "",
                inline_keyboard=[
                    ["‚úÖ –í—Å–µ –æ–∫!"],
                    ["‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"],
                    ["‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç"],
                    ["üñºÔ∏è –î—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É"],
                ],
            )

            if answer == "‚úÖ –í—Å–µ –æ–∫!":
                break
            elif answer == "‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
                title = await response.ask(
                    "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞",
                    inline_keyboard=[["ü§ñ –í–∑—è—Ç—å –Ω–∞—à –≤–∞—Ä–∏–∞–Ω—Ç: diddle doo"]],
                )
            elif answer == "‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç":
                body = await response.ask("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
            elif answer == "üñºÔ∏è –î—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É":
                pass

        # - 5. Send the post to the channel

        pass
