import asyncio
import textwrap

from aiogram.types import BotCommand
from ef_bots.ef_org_bot.add_user_to_chats import add_user_to_chats
from ef_bots.ef_org_bot.deps.deps import Deps
from loguru import logger
from pymaybe import maybe
from teletalk.app import App
from teletalk.blocks.handle_errors import handle_errors
from teletalk.blocks.simple_block import SimpleBlock, build_default_message_callback
from teletalk.models.response import Response
from telethon.tl.types import User


class EFOrgBot(Deps):
    @property
    def menu(self):
        return SimpleBlock(
            "‚öôÔ∏è *–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ*",
            inline_keyboard=[
                [("–ó–∞–æ–Ω–±–æ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", self.start_onboarding)],
                [("Notion EF Org", "https://www.notion.so/Org-48f403a0d3014dc4972f08060031308e?pvs=4")],
                [("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∑–∞–¥–∞—á–∏", "https://www.notion.so/f3f7637c9a1d4733a4d90b33796cf78e?pvs=4")],
                [("–¢–µ–∫—Å—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º", "https://www.notion.so/EF-f1c2d3aeceb04272a61beb6c08c92b47?pvs=4")],
            ],
        )

    # @handle_errors # todo later: make it work
    async def start_onboarding(self, response: Response):
        # - 1. Notion access

        await response.ask(
            "1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å email –æ—Ç Notion —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–æ—à–∞—Ä–∏—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø –Ω–∞ [Home](https://www.notion.so/Home-23bdeeca8c8e4cd99a90f67ea497c5c0?pvs=4)",
            inline_keyboard=[["‚úÖ –î–æ—Å—Ç—É–ø –µ—Å—Ç—å"]],
        )

        # - 2. Add to all telegram ecosystem: ef channel, ef random coffee,

        # -- Ask for telegram username

        while True:
            # - Ask for telegram username

            answer = await response.ask(
                "2. –í–≤–µ–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)"
            )

            telegram_username = answer.replace("@", "").replace("https://t.me/", "").replace("t.me/", "")

            # - Get user entity

            try:
                entity = await self.telegram_user_client.get_entity(f"@{telegram_username}")
            except:
                entity = None

            # - If user if found and it's correct, break the loop

            if isinstance(entity, User):
                answer = await response.ask(
                    f"t.me/{telegram_username}", inline_keyboard=[["‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ", "‚ùå –Ø –æ—à–∏–±—Å—è"]]
                )

                if answer == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ":
                    break
            else:
                await response.tell("–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # -- Get user

        user = await self.telegram_user_client.get_entity(f"@{telegram_username}")

        # -- Add user to chats

        answer = await response.ask(
            "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–∏ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã?", inline_keyboard=[["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
        )

        if answer == "‚úÖ –î–∞":
            try:
                await add_user_to_chats(
                    telegram_client=self.telegram_user_client,
                    username=telegram_username,
                    chats=list(self.config.telegram_ef_chats.values()),
                )
                await response.tell(f"–î–æ–±–∞–≤–∏–ª –≤ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã: {', '.join(self.config.telegram_ef_chats.keys())}")
            except Exception as e:
                logger.exception("Failed to add user to chats", error=e)
                await response.tell(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Å—Ç—å —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤. –û—à–∏–±–∫–∞: {str(e)}")

        # - 3. Get full name

        telegram_full_name = f"{user.first_name} {user.last_name}"

        answer = await response.ask(
            "3. –í–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ",
            inline_keyboard=[[f"‚úèÔ∏è –í–∑—è—Ç—å –∏–∑ —Ç–µ–ª–µ–≥–∏: {telegram_full_name}"]],
            message_callback=build_default_message_callback(supress_messages=False),
        )

        full_name = telegram_full_name if "‚úèÔ∏è" in answer else answer

        # - 4. Create onboarding page in Notion

        # -- Prompt

        await response.tell("4. –ü–µ—Ä–µ—à–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É:")

        # -- Create page

        result, new_pages = await self.notion_client().upsert_database(
            database={
                "id": "106b738eed9a80cf8669e76dc12144b7",  # pragma: allowlist secret
            },
            pages=[{"properties": {"Name": {"title": [{"text": {"content": f"üèÑ‚Äç‚ôÇÔ∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ EF –¥–ª—è {full_name}"}}]}}}],
            page_unique_id_func=lambda page: page["properties"]["Name"]["title"][0]["text"]["content"],
        )

        # -- Send the message to forward to the user

        await response.tell(
            textwrap.dedent(f"""
    ‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EF! 
    
    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏:
    - –í [Notion](https://www.notion.so/Home-23bdeeca8c8e4cd99a90f67ea497c5c0?pvs=4) 
    - –í –∫–∞–Ω–∞–ª EF Channel. –¢–∞–º —É –Ω–∞—Å –≤—Å–µ –ø–æ—Å—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å—ã - –≤ —Ç–æ–º —á–∏—Å–ª–µ —Ç–≤–æ–∏ –±—É–¥—É—Ç
    - –í —á–∞—Ç–∏–∫ EF Random Coffee - —Ç–∞–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —É—á–∞—Å—Ç–≤—É–π! :)
    
    –î–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—á–∫—É –≤ Notion, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥": [üèÑ‚Äç‚ôÇÔ∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ EF –¥–ª—è {full_name}]({new_pages[0]['url']})
    """)
        )

        await asyncio.sleep(0.5)

        # - 5. Write the final message

        # -- Send a reminder in 3 days  to check if the user has filled the form

        # todo later: implement

        # -- Send the final message for the user

        await response.ask(
            "5. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏–ª! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç, –ú–∞—Ç–≤–µ—é –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –æ –Ω–µ–º –ø–æ—Å—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –µ–º—É —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞ —ç—Ç–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –º–µ—Ä—Å–∏ –±–æ–∫—É! ",
            inline_keyboard=[["‚úÖ –ì–æ—Ç–æ–≤–æ!"]],
        )

        return await response.ask()  # go back to the original response prompt, e.g. the menu


def main(env="test"):
    async def _main():
        async with EFOrgBot(env=env) as bot:
            async with App(
                state_backend="rocksdict",
                state_config={"path": str(bot.local_files_dir / "app_state")},
            ) as app:
                # - Load chat_ids to run at startup - the ones which have last message from the bot (usually the menu message). Needed for user not to press /start if bot has been restarted, and just used the menu of the last message (beta)

                chat_ids_to_run_at_startup = [
                    chat_id
                    for chat_id, chat_private_state in app.iter_chat_states(private=True)
                    if maybe(chat_private_state)["messages"][-1]["from_user"]["is_bot"].or_else(False)
                ]

                logger.info("Chats to run at startup", chat_ids=chat_ids_to_run_at_startup)

                # - Start polling

                await app.start_polling(
                    bot=bot.config.telegram_bot_token,
                    initial_starters={
                        chat_id: lambda response: response.ask(bot.menu, mode="inplace_latest")
                        for chat_id in chat_ids_to_run_at_startup
                    },  # in case of restart, we will start from the last bot message
                    command_starters={"/start": lambda response: response.ask(bot.menu)},
                    commands=[
                        BotCommand(command="start", description="Start the bot"),
                        BotCommand(command="cancel", description="Cancel the current operation"),
                    ],
                )

    asyncio.run(_main())


if __name__ == "__main__":
    import typer

    typer.run(main)
